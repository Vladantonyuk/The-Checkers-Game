# describe('Blackjack game', () => {
 let deck_id;
 let player1Cards;
 let player2Cards;

 it('Navigate to website and verify it is up', () => {
    cy.request('https://deckofcardsapi.com/').its('status').should('equal', 200);
    });
    it('Get a new deck', () => {
    cy.request('https://deckofcardsapi.com/api/deck/new/').then((response) => {
    expect(response.status).to.equal(200);
    expect(response.body.success).to.be.true;
    deck_id = response.body.deck_id;
    });
    });
    it('Shuffle the deck', () => {
    cy.request('https://deckofcardsapi.com/api/deck/${deck_id}/shuffle/').then((response) => {
    expect(response.status).to.equal(200);
    expect(response.body.success).to.be.true;
    expect(response.body.shuffled).to.be.true;
    });
    });
    it('Deal three cards to each of two players', () => {
    cy.request('https://deckofcardsapi.com/api/deck/${deck_id}/draw/?count=3').then((response) => {
    expect(response.status).to.equal(200);
    expect(response.body.success).to.be.true;
    player1Cards = response.body.cards;
    });
    cy.request('https://deckofcardsapi.com/api/deck/${deck_id}/draw/?count=3').then((response) => {
    expect(response.status).to.equal(200);
    expect(response.body.success).to.be.true;
    player2Cards = response.body.cards;
    });
    });
    it('Check whether either player has blackjack', () => {
    const hasBlackjack = (cards) => {
    const values = cards.map(card => card.value);
    return values.includes('ACE') && (values.includes('10') ||
    values.includes('JACK') || values.includes('QUEEN') ||
    values.includes('KING'));
    };
    const player1HasBlackjack = hasBlackjack(player1Cards);
    const player2HasBlackjack = hasBlackjack(player2Cards);
    expect(player1HasBlackjack || player2HasBlackjack).to.be.true;
    if (player1HasBlackjack) {
    cy.log('player 1 has blackjack');
    }
    if (player2HasBlackjack) {
    cy.log('player 2 has blackjack');
    }
    });
    });
